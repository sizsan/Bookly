require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe AdvertsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Advert. As you add validations to Advert, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { price:12.00, condition: 'New', book_id: book.id, seller_id: user.id }
  }

  let(:invalid_attributes) {
    { price:'12', condition:'Old', book_id: book.id, seller_id: user.id }
  }

  let(:book) {
    Book.create( isbn:'9780409337419',title:'Queensland Evidence Law',description:nil,image_link:'http://books.google.com/books/content?id=ngP8oAEACAAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api',authors:'David Field')
  }

  let(:user) {
    User.create(email:'susan@example.com',username:'susankey',password: '123testing1',password_confirmation: '123testing1',firstname:'Susan',lastname:'Key')
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AdvertsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      get :index
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      advert = Advert.create! valid_attributes
      get :show, params: {id: advert.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {book_id: book.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Advert" do
        expect {
          post :create, params: {advert: valid_attributes}, session: valid_session
        }.to change(Advert, :count).by(1)
      end

      it "redirects to the created advert" do
        post :create, params: {advert: valid_attributes}, session: valid_session
        expect(response).to redirect_to(adverts_path)
      end
    end

    context "with invalid params" do
      it "returns a success response" do
        post :create, params: {advert: invalid_attributes}, session: valid_session
        expect(response).to redirect_to(adverts_path)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested advert" do
      advert = Advert.create! valid_attributes
      expect {
        delete :destroy, params: {id: advert.to_param}, session: valid_session
      }.to change(Advert, :count).by(-1)
    end

    it "redirects to the adverts list" do
      advert = Advert.create! valid_attributes
      delete :destroy, params: {id: advert.to_param}, session: valid_session
      expect(response).to redirect_to(adverts_url)
    end
  end

end
